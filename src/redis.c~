#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <hiredis/hiredis.h>
#include<fcntl.h>

void main()
{
  redisContext *conn;
  redisReply *reply;
  const char *hostname;
  const int port = 6379;
  const char *password;
  struct timeval timeout = { 1, 500000 }; // 1.5 seconds
  int env, size, i, j;
  char tmp[100];

  env  = open("../.env" , O_RDONLY) ;
  
  if(env == -1)
    {
      printf("\nImpossible d'ouvrir le fichier .env");
      return 84;
    }

  size = read(env, tmp, 100);

  if(!size)
    return 84;

  for(i = 0; i < size; i++)
    {
      if(! strncmp(tmp+i, "DB_HOST = ", 10))
	{
	  i += 10;
	  j = i;
	  
	  while(tmp[j] != '\n')
	    j++;
	  strncpy(hostname, tmp+i, j-i);
	}
      
      else if(! strncmp(tmp+i, "DB_PASSWORD = ", 14))
	{
	  i += 14;
	  j = i;
	  
	  while(tmp[j] != '\n')
	    j++;
	  strncpy(password, tmp+i, j-i);
	}      
    }

  printf("\n %s %s", hostname, password);

  conn = redisConnectWithTimeout(hostname, port, timeout);
  if (conn == NULL || conn->err)
    {
      if (conn)
	{
	  printf("Erreur de connexion: %s\n", conn->errstr);
	  redisFree(conn);
	}
      else
	{
	  printf("Erreur de connexion: impossible d'allouer le contexte redis\n");
	}
      return 0;
    }
  
  /* AUTH */
  reply = redisCommand(conn, "AUTH %s", password);
  printf("AUTH: %s\n", reply->str);
  freeReplyObject(reply);
     
  return 0;
}
